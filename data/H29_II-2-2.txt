４．１　ソフトウェアテストの分類観点
ソフトウェアテストの分類として、ホワイトボックステストとブラックボックステストの２つがある。
ホワイトボックステストでは、テスト対象のソースコードに着目して、命令文、条件分岐の動作が正しく動作しているか確認を行う。主に、単体試験で実施する。ホワイトボックステストにより、プログラム内部の命令文単位で動作確認を実施できる。
ブラックボックステストは、ソースコードを意識せずに、インプット・アウトプットのみに着目して、プログラムが正しく動作しているか確認を行う。主に、結合試験にて実施する。

４．２　ソフトウェアテストの具体例

（１）　カバレッジ網羅試験
ホワイトボックステストの代表例として、カバレッジ網羅試験がある。実施手順は以下の通り。
・フローチャートを書く
・カバレッジ基準を決める（分岐網羅or条件網羅）
・カバレッジ基準を網羅する経路を抽出する
・抽出した経路を通る試験を実施し、結果を確認する

（２）　境界値試験
ブラックボックス試験の代表例として、境界値試験がある。実施手順は以下の通り。
・使用上の境界を抽出する
・各境界ごとに、境界値を抽出する
・抽出した境界値にて試験を実施し、結果を確認する

４．３　ソフトウェアテストの実施方法
ソフトウェアの品質保証にあたり、まず単体試験でのホワイトボックステストから実施し、モジュール単体での欠陥を改修することが重要である。結合試験でのブラックボックス試験では、モジュール内に存在する欠陥を全て検出するのは難しい。
ブラックボックステストでは、モジュール間のインタフェースに着目する。単体試験では、インタフェースの欠陥を検出するのは難しい。それぞれのフェーズで検出すべき欠陥を、もれなく検出することが重要である。
欠陥が見つかった場合、それを記録してテストを進めることが重要である。テストで見つけた欠陥について、簡単なものであれば記録せずに改修を行ってしまうことがある。しかし、記録せずにテストを進めると、品質データ（試験項目数、欠陥数、等）の正当性が失われ、開発プロセスの品質評価ができなくなる。
ソフトウェアの品質は、開発プロセスの品質の積み重ねである。品質データをしっかりと取得してテストを進めることで、品質問題を各フェーズ移行時に検出可能となる。
