（１）代表的なパターン集
ソフトウェア開発の設計時に用いられる代表的なパターンとして、「デザインパターン」がある。
デザインパターンは、過去の設計の成功パターンを集めたものである。設計上の課題が発生した時、デザインパターンを適用することにより、設計品質の向上が期待できる。
有名なものとして、ＧｏＦの「オブジェクト指向における再利用のためのデザインパターン」がある。この中では、オブジェクトの生成、構造、振る舞いに関するパターンがまとめられている。

（２）提供形式と効果
デザインパターンは、プログラマの間で何度も繰り返し考え出されてきた設計ノウハウに名前をつけ、再利用しやすいように一定の提供形式でカタログ化したものである。
提供形式としては、下記の情報を有する。
・デザインパターン名
・目的
・クラス図
・利用例
デザインパターンは、開発者同士で共通認識を持つためにも使用できる。どのデザインパターンを使うか共通認識を持つことで、設計方針を統一化できる。

（３）適用時の課題
デザインパターンは、最適なパターンを時と場合に応じて使い分ける技術が必要となる。
デザインパターンは、「ありとあらゆる場合に適用できる最善の設計」ではない。デザインパターンを適切に使用しないと、逆にコードの複雑さを高めてしまうリスクがある。
また、いくつかのデザインパターンは、言語の対応により使用する必要がないものがある。例えば、イテレータパターンの場合、大抵のオブジェクト指向言語（Ｊａｖａ、Ｃ＃、Ｒｕｂｙ等）では言語で対応しており、ソフトウェア開発者で使う必要がない。
